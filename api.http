## valid uuid = b8ee6449-b662-4245-9f12-430dfb74df6c
@jwtToken = xxx
### 
# @name createCategory
POST http://localhost:3000/categories
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
    "name": "Category 1",
    "description": "Description 1"
}

###

@categoryId = {{createCategory.response.body.data.id}}

###
GET http://localhost:3000/categories
Authorization: Bearer {{jwtToken}}

###
GET http://localhost:3000/categories/{{categoryId}}
Authorization: Bearer {{jwtToken}}


### 
# @name createGenre
POST http://localhost:3000/genres
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
    "name": "Genre 1",
    "categories_id": [
        "{{categoryId}}"
    ]
}

###

@genreId = {{createGenre.response.body.data.id}}

###

# @name createCastMember
POST http://localhost:3000/cast-members
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
    "name": "Cast Member 1",
    "type": 1
}

###

@castMemberId = {{createCastMember.response.body.data.id}}


###
# @name createVideo
POST http://localhost:3000/videos
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
    "title": "Video 1",
    "description": "Description 1",
    "year_launched": 2020,
    "is_opened": false,
    "rating": "L",
    "duration": 90,
    "categories_id": [
        "{{categoryId}}"
    ],
    "genres_id": [
        "{{genreId}}"
    ],
    "cast_members_id": [
        "{{castMemberId}}"
    ]
}

###

@videoId = {{createVideo.response.body.data.id}}

###

GET http://localhost:3000/videos/{{videoId}}
Authorization: Bearer {{jwtToken}}

###
# @name updateVideo
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
    "title": "A volta dos que não foram",
    "description": "Description A volta dos que não foram - parte 1",
    "year_launched": 2022,
    "is_opened": true,
    "rating": "L",
    "duration": 90,
    "categories_id": [
        "{{categoryId}}"
    ],
    "genres_id": [
        "{{genreId}}"
    ],
    "cast_members_id": [
        "{{castMemberId}}"
    ]
}

###
# @name uploadVideo
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234
Authorization: Bearer {{jwtToken}}

------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234--

###
# @name uploadVideoWithFileAndDataTogetherError
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234
Authorization: Bearer {{jwtToken}}

------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234
Content-Disposition: form-data; name="title"
Content-Type: text/plain

Video teste
------WebKitFormBoundary1234--

###
# @name uploadVideoOnlyOneFileError
PATCH http://localhost:3000/videos/{{videoId}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234
Authorization: Bearer {{jwtToken}}

------WebKitFormBoundary1234
Content-Disposition: form-data; name="banner"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json
------WebKitFormBoundary1234--

###
# @name uploadSpecializedEndpoint
PATCH http://localhost:3000/videos/{{videoId}}/upload
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary1234
Authorization: Bearer {{jwtToken}}

------WebKitFormBoundary1234
Content-Disposition: form-data; name="video"; filename="video.mp4"
Content-Type: video/mp4

< ./package.json

------WebKitFormBoundary1234--

###
GET http://localhost:3000/fake-event

###
GET http://localhost:3000/rabbitmq-fake

###

### Estou usando host.docker.internal, porque no momento o dev container com rest client está fazendo requisição de dentro do container, 
### então por localhost:8080 não funciona, mas se estiver usando o rest client fora do container, pode usar localhost:8080
POST http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

username=admin@user.com
&password=secret
&grant_type=password
&client_id=codeflix-admin-frontend

### configuração do openid connect server
GET http://host.docker.internal:8080/realms/codeflix/.well-known/openid-configuration

### certificados
GET http://host.docker.internal:8080/realms/codeflix/protocol/openid-connect/certs

### Esse é um teste que fizemos para estudar como gerar token
POST http://localhost:3000/auth
Content-Type: application/json

{
    "email": "user@userland.com",
    "password": "12345678"
}

### Aqui estamos usando token gerado (temos dois métodos: via keycloak ou com os geradores do projeto)
### Scripts create-rsa.js e depois generate-token.js
GET http://localhost:3000/auth
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

###


